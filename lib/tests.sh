#!/bin/bash
# tests.sh - Smoke tests –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
# WorkerNet Installer v5.0

# –°—á–µ—Ç—á–∏–∫–∏ —Ç–µ—Å—Ç–æ–≤
TESTS_PASSED=0
TESTS_FAILED=0
TESTS_TOTAL=0

# –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç
run_test() {
    local test_name="$1"
    local test_function="$2"
    
    ((TESTS_TOTAL++))
    
    log_info "Test $TESTS_TOTAL: $test_name"
    
    if $test_function; then
        ((TESTS_PASSED++))
        ok "  ‚úÖ PASS"
        return 0
    else
        ((TESTS_FAILED++))
        log_error "  ‚ùå FAIL"
        return 1
    fi
}

# –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
test_services() {
    local os_type=$(get_os_type)
    local services=()
    
    # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
    if [ "$os_type" = "almalinux" ]; then
        services=("postgresql-16" "redis" "rabbitmq-server" "php83-php-fpm" "supervisord")
        
        if [ "$WEBSERVER" = "apache" ]; then
            services+=("httpd")
        else
            services+=("nginx")
        fi
    else
        services=("postgresql" "redis" "rabbitmq-server" "php8.3-fpm" "supervisor")
        
        if [ "$WEBSERVER" = "apache" ]; then
            services+=("apache2")
        else
            services+=("nginx")
        fi
    fi
    
    local failed=0
    for service in "${services[@]}"; do
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è PostgreSQL (–∏—Å–ø–æ–ª—å–∑—É–µ–º pg_isready)
        if [[ "$service" == "postgresql"* ]]; then
            if sudo -u postgres pg_isready -q 2>/dev/null; then
                log_debug "    ‚úì $service –∞–∫—Ç–∏–≤–µ–Ω (pg_isready)"
            else
                log_error "    ‚úó $service –ù–ï –∞–∫—Ç–∏–≤–µ–Ω (pg_isready failed)"
                ((failed++))
            fi
        # –û–±—ã—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        else
            if is_service_active "$service"; then
                log_debug "    ‚úì $service –∞–∫—Ç–∏–≤–µ–Ω"
            else
                log_error "    ‚úó $service –ù–ï –∞–∫—Ç–∏–≤–µ–Ω"
                ((failed++))
            fi
        fi
    done
    
    [ $failed -eq 0 ]
}

# –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
test_ports() {
    local ports=(80 5432 6379 5672 15672 15674)
    local failed=0
    
    for port in "${ports[@]}"; do
        if is_port_in_use "$port"; then
            log_debug "    ‚úì Port $port —Å–ª—É—à–∞–µ—Ç—Å—è"
        else
            log_error "    ‚úó Port $port –ù–ï —Å–ª—É—à–∞–µ—Ç—Å—è"
            ((failed++))
        fi
    done
    
    [ $failed -eq 0 ]
}

# –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
test_database() {
    if sudo -u postgres psql -d "$DB_NAME" -c "SELECT 1" &> /dev/null; then
        log_debug "    ‚úì Database $DB_NAME –¥–æ—Å—Ç—É–ø–Ω–∞"
        return 0
    else
        log_error "    ‚úó Database $DB_NAME –ù–ï –¥–æ—Å—Ç—É–ø–Ω–∞"
        return 1
    fi
}

# –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ PostGIS
test_postgis() {
    local postgis_version=$(sudo -u postgres psql -d "$DB_NAME" -tAc "SELECT PostGIS_Version()" 2>/dev/null)
    
    if [ -n "$postgis_version" ]; then
        log_debug "    ‚úì PostGIS installed: $postgis_version"
        return 0
    else
        log_error "    ‚úó PostGIS –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        return 1
    fi
}

# –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
test_redis() {
    if redis-cli -h 127.0.0.1 -p 6379 -a "$GENHASH" ping 2>/dev/null | grep -q "PONG"; then
        log_debug "    ‚úì Redis –æ—Ç–≤–µ—á–∞–µ—Ç with password"
        return 0
    else
        log_error "    ‚úó Redis –ù–ï –æ—Ç–≤–µ—á–∞–µ—Ç"
        return 1
    fi
}

# –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ RabbitMQ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
test_rabbitmq_users() {
    local failed=0
    
    if rabbitmqctl authenticate_user "$NAMERABBITADMIN" "$GENPASSRABBITADMIN" &> /dev/null; then
        log_debug "    ‚úì Admin user –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"
    else
        log_error "    ‚úó Admin user NOT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"
        ((failed++))
    fi
    
    if rabbitmqctl authenticate_user "$NAMERABBITUSER" "$GENPASSRABBITUSER" &> /dev/null; then
        log_debug "    ‚úì Workernet user –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"
    else
        log_error "    ‚úó Workernet user NOT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"
        ((failed++))
    fi
    
    if rabbitmqctl authenticate_user "$WEBSTOMPUSER" "$GENPASSWEBSTOMPUSER" &> /dev/null; then
        log_debug "    ‚úì WebSocket user –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"
    else
        log_error "    ‚úó WebSocket user NOT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"
        ((failed++))
    fi
    
    [ $failed -eq 0 ]
}

# –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
test_webserver() {
    sleep 2  # –î–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
    
    if curl -f -s http://localhost/ > /dev/null; then
        log_debug "    ‚úì Web server –æ—Ç–≤–µ—á–∞–µ—Ç"
        return 0
    else
        log_error "    ‚úó Web server –ù–ï –æ—Ç–≤–µ—á–∞–µ—Ç"
        return 1
    fi
}

# –¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ PHP
test_php() {
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∑–∞–ø—É—Å—Ç–∏—Ç—å php -v –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–≤–æ–¥ –≤–µ—Ä—Å–∏–∏
    if php -v >/dev/null 2>&1; then
        local php_version=$(php -v 2>/dev/null | head -1 | grep -oP 'PHP \d+\.\d+')
        if [ -n "$php_version" ]; then
            log_debug "    ‚úì PHP —Ä–∞–±–æ—Ç–∞–µ—Ç ($php_version)"
            return 0
        fi
    fi
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π –∫–æ–¥
    if php -r "echo 'OK';" 2>/dev/null | grep -q "OK"; then
        log_debug "    ‚úì PHP —Ä–∞–±–æ—Ç–∞–µ—Ç"
        return 0
    fi
    
    log_error "    ‚úó PHP –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    log_error "    –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: php -v"
    return 1
}

# –¢–µ—Å—Ç 9: –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
test_env_file() {
    local env_file="${INSTALL_DIR}/.env"
    
    if [ -f "$env_file" ] && grep -q "DB_DSN" "$env_file"; then
        log_debug "    ‚úì .env file —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"
        return 0
    else
        log_error "    ‚úó .env file –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"
        return 1
    fi
}

# –¢–µ—Å—Ç 9: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
test_versions() {
    log_debug "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤..."
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –≤–µ—Ä—Å–∏–∏
    if check_minimum_versions; then
        log_debug "    ‚úì –í—Å–µ –≤–µ—Ä—Å–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º"
        return 0
    else
        log_warn "    ‚ö† –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–º–µ—é—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –≤–µ—Ä—Å–∏–∏"
        return 0  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –Ω–æ —Å—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ
    fi
}

# –¢–µ—Å—Ç 10: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
test_permissions() {
    local os_type=$(get_os_type)
    local expected_owner="www-data:www-data"
    
    if [ "$os_type" = "almalinux" ]; then
        if [ "$WEBSERVER" = "apache" ]; then
            expected_owner="apache:apache"
        else
            expected_owner="nginx:nginx"
        fi
    fi
    
    local actual_owner=$(stat -c '%U:%G' "$INSTALL_DIR" 2>/dev/null || stat -f '%Su:%Sg' "$INSTALL_DIR")
    
    if [ "$actual_owner" = "$expected_owner" ]; then
        log_debug "    ‚úì –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã: $actual_owner"
        return 0
    else
        log_error "    ‚úó –ù–µ–≤–µ—Ä–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: $actual_owner (–æ–∂–∏–¥–∞–µ—Ç—Å—è: $expected_owner)"
        return 1
    fi
}

# –¢–µ—Å—Ç 12: –ü—Ä–æ–≤–µ—Ä–∫–∞ Supervisor workers
test_supervisor_workers() {
    local running_workers=$(supervisorctl status 2>/dev/null | grep RUNNING | wc -l)
    
    if [ $running_workers -ge 1 ]; then
        log_debug "    ‚úì Supervisor workers –∑–∞–ø—É—â–µ–Ω–æ: $running_workers"
        return 0
    else
        log_warn "    ‚ö† Supervisor workers –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –µ—Å–ª–∏ post-install –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω)"
        return 0  # –ù–µ —Å—á–∏—Ç–∞–µ–º –æ—à–∏–±–∫–æ–π
    fi
}

# –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ smoke tests
run_smoke_tests() {
    log_section "üß™ –ó–ê–ü–£–°–ö SMOKE TESTS"
    
    TESTS_PASSED=0
    TESTS_FAILED=0
    TESTS_TOTAL=0
    
    run_test "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤" test_services
    run_test "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤" test_ports
    run_test "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö" test_database
    run_test "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è PostGIS" test_postgis
    run_test "–ü—Ä–æ–≤–µ—Ä–∫–∞ Redis" test_redis
    run_test "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π RabbitMQ" test_rabbitmq_users
    run_test "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞" test_webserver
    run_test "–ü—Ä–æ–≤–µ—Ä–∫–∞ PHP" test_php
    run_test "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤" test_versions
    run_test "–ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞" test_env_file
    run_test "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞" test_permissions
    run_test "–ü—Ä–æ–≤–µ—Ä–∫–∞ Supervisor workers" test_supervisor_workers
    
    # –ò—Ç–æ–≥–∏
    echo ""
    log_separator "="
    
    if [ $TESTS_FAILED -eq 0 ]; then
        ok "‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã: $TESTS_PASSED/$TESTS_TOTAL"
        ok "‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!"
    else
        log_error "‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏: $TESTS_FAILED/$TESTS_TOTAL"
        log_error "   –ü—Ä–æ–π–¥–µ–Ω–æ: $TESTS_PASSED"
        log_warn "   –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ"
        log_separator "="
        return 1
    fi
    
    log_separator "="
    echo ""
    
    return 0
}

# –ê–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å install.sh
setup_tests() {
    run_smoke_tests
}

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏
export -f run_test
export -f test_services
export -f test_ports
export -f test_database
export -f test_postgis
export -f test_redis
export -f test_rabbitmq_users
export -f test_webserver
export -f test_php
export -f test_versions
export -f test_env_file
export -f test_permissions
export -f test_supervisor_workers
export -f run_smoke_tests
export -f setup_tests

