#!/bin/bash
# progress.sh - –ü—Ä–æ–≥—Ä–µ—Å—Å Bar –∏ –∏–Ω–¥–∏–∫–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
# WorkerNet Installer v5.0

# –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
TOTAL_STEPS=15
CURRENT_STEP=0
START_TIME=0

# –ù–∞–∑–≤–∞–Ω–∏—è —à–∞–≥–æ–≤
declare -a STEP_NAMES=(
    "Pre-flight checks"
    "System preparation"
    "Firewall configuration"
    "PostgreSQL installation"
    "PostgreSQL configuration"
    "Redis installation"
    "RabbitMQ installation"
    "RabbitMQ configuration"
    "PHP installation"
    "Python installation"
    "Supervisor installation"
    "Web server installation"
    "Web server configuration"
    "Application setup"
    "Final checks"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
init_progress() {
    CURRENT_STEP=0
    START_TIME=$(date +%s)
    TOTAL_STEPS=${#STEP_NAMES[@]}
}

# –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
show_progress() {
    local step_name="${1:-${STEP_NAMES[$CURRENT_STEP]}}"
    
    ((CURRENT_STEP++))
    
    local percent=$((CURRENT_STEP * 100 / TOTAL_STEPS))
    local filled=$((CURRENT_STEP * 50 / TOTAL_STEPS))
    local empty=$((50 - filled))
    
    # –í—ã—á–∏—Å–ª–∏—Ç—å –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è
    local current_time=$(date +%s)
    local elapsed=$((current_time - START_TIME))
    local avg_time_per_step=$((elapsed / CURRENT_STEP))
    local remaining_steps=$((TOTAL_STEPS - CURRENT_STEP))
    local eta=$((remaining_steps * avg_time_per_step))
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è
    local eta_min=$((eta / 60))
    local eta_sec=$((eta % 60))
    
    # –°–æ–∑–¥–∞—Ç—å progress bar
    printf "\r["
    printf "%${filled}s" | tr ' ' '‚ñà'
    printf "%${empty}s" | tr ' ' '‚ñë'
    printf "] %3d%% | Step %d/%d | ETA: %02d:%02d | %s" \
        $percent $CURRENT_STEP $TOTAL_STEPS $eta_min $eta_sec "$step_name"
    
    # –î–æ–±–∞–≤–∏—Ç—å –≤ –ª–æ–≥
    log_debug "–ü—Ä–æ–≥—Ä–µ—Å—Å: $percent% - $step_name"
    
    if [ $CURRENT_STEP -eq $TOTAL_STEPS ]; then
        echo ""
        echo ""
    fi
}

# Spinner –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
spinner() {
    local pid=$1
    local message="${2:-–û–±—Ä–∞–±–æ—Ç–∫–∞...}"
    local spin='‚†ã‚†ô‚†π‚†∏‚†º‚†¥‚†¶‚†ß‚†á‚†è'
    local i=0
    
    while kill -0 $pid 2>/dev/null; do
        i=$(( (i+1) %10 ))
        printf "\r${spin:$i:1} %s" "$message"
        sleep 0.1
    done
    
    printf "\r‚úÖ %s\n" "$message"
}

# –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —Å–æ spinner
run_with_spinner() {
    local message="$1"
    shift
    local cmd="$@"
    
    # –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ–Ω–µ
    eval "$cmd" &> /tmp/spinner_output_$$.log &
    local pid=$!
    
    # –ü–æ–∫–∞–∑–∞—Ç—å spinner
    spinner $pid "$message"
    
    # –î–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    wait $pid
    local exit_code=$?
    
    # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if [ $exit_code -eq 0 ]; then
        log_debug "Command succeeded: $cmd"
    else
        log_error "Command failed: $cmd"
        log_error "Output: $(cat /tmp/spinner_output_$$.log)"
    fi
    
    rm -f /tmp/spinner_output_$$.log
    return $exit_code
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏
show_installation_summary() {
    local success=$1
    local end_time=$(date +%s)
    local total_duration=$((end_time - START_TIME))
    local minutes=$((total_duration / 60))
    local seconds=$((total_duration % 60))
    
    echo ""
    log_separator "="
    log_info "INSTALLATION SUMMARY"
    log_separator "="
    echo ""
    
    if [ "$success" = "true" ]; then
        ok "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! üéâ"
    else
        log_error "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å ‚ùå"
    fi
    
    echo ""
    log_info "–û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${minutes}m ${seconds}s"
    log_info "–ó–∞–≤–µ—Ä—à–µ–Ω–æ —à–∞–≥–æ–≤: $CURRENT_STEP / $TOTAL_STEPS"
    
    if [ ${#INSTALLED_PACKAGES[@]} -gt 0 ]; then
        log_info "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–∞–∫–µ—Ç–æ–≤: ${#INSTALLED_PACKAGES[@]}"
    fi
    
    if [ ${#CREATED_DATABASES[@]} -gt 0 ]; then
        log_info "–°–æ–∑–¥–∞–Ω—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${CREATED_DATABASES[*]}"
    fi
    
    if [ ${#STARTED_SERVICES[@]} -gt 0 ]; then
        log_info "–ó–∞–ø—É—â–µ–Ω—ã —Å–µ—Ä–≤–∏—Å—ã: ${STARTED_SERVICES[*]}"
    fi
    
    echo ""
    log_info "–§–∞–π–ª –ª–æ–≥–∞: $INSTALL_LOG"
    log_separator "="
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    if [ "$success" = "true" ]; then
        echo ""
        log_info "üìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:"
        echo ""
        log_info "1. –û—Ç–∫—Ä–æ–π—Ç–µ WorkerNet –≤ –±—Ä–∞—É–∑–µ—Ä–µ:"
        log_info "   http://$(hostname -I | awk '{print $1}')/"
        echo " –†–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: admin / 1234"
        echo ""

        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —É—á—ë—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if [ -f "${CREDENTIALS_FILE:-/var/log/workernet/install_credentials.env}" ]; then
            log_info "2. –£—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:"
            log_info "   ${CREDENTIALS_FILE:-/var/log/workernet/install_credentials.env}"
            log_info "   (–±–µ–∑–æ–ø–∞—Å–Ω–æ, –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ root)"
            echo ""
            
        fi
        
        echo ""
        log_separator "="
    fi
    
    echo ""
}

# –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏ (–¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤)
download_with_progress() {
    local url=$1
    local output=$2
    local description="${3:-–ó–∞–≥—Ä—É–∑–∫–∞}"
    
    log_info "$description..."
    
    if command_exists curl; then
        curl -# -L -o "$output" "$url" 2>&1 | \
        while IFS= read -r line; do
            if [[ $line =~ ([0-9]+\.[0-9]+)% ]]; then
                local percent="${BASH_REMATCH[1]}"
                printf "\r  –ü—Ä–æ–≥—Ä–µ—Å—Å: %s%%" "$percent"
            fi
        done
        echo ""
    elif command_exists curl; then
        curl -L --progress-bar -o "$output" "$url" 2>&1 | \
        grep --line-buffered "%" | \
        sed -u -e "s,\.,,g" | \
        awk '{printf("\r  –ü—Ä–æ–≥—Ä–µ—Å—Å: %s", $2)}'
        echo ""
    else
        log_error "curl not found"
        return 1
    fi
}

# –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (–ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø)
package_install_progress() {
    local package_manager=$1
    shift
    local packages=("$@")
    local total=${#packages[@]}
    
    log_info "Installing $total packages in parallel..."
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    printf "  [  0%%] Installing packages...\r"
    
    case $package_manager in
        apt)
            # –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê: –≤—Å–µ –ø–∞–∫–µ—Ç—ã —Å—Ä–∞–∑—É
            if apt install -y "${packages[@]}" 2>&1 | tee -a "${LOG_FILE:-/dev/null}" | \
               while IFS= read -r line; do
                   # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º —É—Å—Ç–∞–Ω–æ–≤–∫–∏
                   if [[ $line =~ ([0-9]+)% ]]; then
                       local percent="${BASH_REMATCH[1]}"
                       printf "\r  [%3s%%] Installing packages..." "$percent"
                   elif [[ $line =~ "Setting up" ]] || [[ $line =~ "Configuring" ]]; then
                       printf "\r  [ 90%%] Configuring packages...\r"
                   fi
               done; then
                printf "\r  [100%%] All packages installed successfully\n"
                ok "–í—Å–µ –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"
                
                # –î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ –ø–∞–∫–µ—Ç—ã –≤ —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö
                INSTALLED_PACKAGES+=("${packages[@]}")
                return 0
            else
                printf "\r  [ERROR] Package installation failed\n"
                log_error "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞–∫–µ—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"
                return 1
            fi
            ;;
        dnf)
            # –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê: –≤—Å–µ –ø–∞–∫–µ—Ç—ã —Å—Ä–∞–∑—É
            if dnf install -y "${packages[@]}" 2>&1 | tee -a "${LOG_FILE:-/dev/null}" | \
               while IFS= read -r line; do
                   # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º —É—Å—Ç–∞–Ω–æ–≤–∫–∏
                   if [[ $line =~ ([0-9]+)% ]]; then
                       local percent="${BASH_REMATCH[1]}"
                       printf "\r  [%3s%%] Installing packages..." "$percent"
                   elif [[ $line =~ "Installing" ]] || [[ $line =~ "Updating" ]]; then
                       printf "\r  [ 90%%] Installing packages...\r"
                   fi
               done; then
                printf "\r  [100%%] All packages installed successfully\n"
                ok "–í—Å–µ –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"
                
                # –î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ –ø–∞–∫–µ—Ç—ã –≤ —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö
                INSTALLED_PACKAGES+=("${packages[@]}")
                return 0
            else
                printf "\r  [ERROR] Package installation failed\n"
                log_error "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞–∫–µ—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"
                return 1
            fi
            ;;
        *)
            log_error "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–∫–µ—Ç–æ–≤: $package_manager"
            return 1
            ;;
    esac
}

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏
export -f init_progress
export -f show_progress
export -f spinner
export -f run_with_spinner
export -f show_installation_summary
export -f download_with_progress
export -f package_install_progress

